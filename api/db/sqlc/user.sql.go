// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createOrUpdateUser = `-- name: CreateOrUpdateUser :one
INSERT INTO users (
  email, name, given_name, family_name, picture
) VALUES (
  $1, $2, $3, $4, $5
) 
ON CONFLICT (email) DO UPDATE
SET name = $2, given_name = $3, family_name = $4, picture = $5
RETURNING id, email, name, given_name, family_name, picture
`

type CreateOrUpdateUserParams struct {
	Email      string `json:"email"`
	Name       string `json:"name"`
	GivenName  string `json:"givenName"`
	FamilyName string `json:"familyName"`
	Picture    string `json:"picture"`
}

func (q *Queries) CreateOrUpdateUser(ctx context.Context, arg CreateOrUpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateUser,
		arg.Email,
		arg.Name,
		arg.GivenName,
		arg.FamilyName,
		arg.Picture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.GivenName,
		&i.FamilyName,
		&i.Picture,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, name, given_name, family_name, picture FROM users 
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.GivenName,
		&i.FamilyName,
		&i.Picture,
	)
	return i, err
}
