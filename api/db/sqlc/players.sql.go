// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: players.sql

package db

import (
	"context"
	"database/sql"
)

const assignTeamToPlayer = `-- name: AssignTeamToPlayer :exec
WITH player_update AS (
    UPDATE players
    SET team_id = $1
    WHERE players.id = $2
    RETURNING 1
)
UPDATE participant_teams
SET balance = balance - $3
WHERE participant_teams.id = $1
    AND EXISTS (SELECT 1 FROM player_update)
`

type AssignTeamToPlayerParams struct {
	ID      int32 `json:"id"`
	ID_2    int32 `json:"id2"`
	Balance int32 `json:"balance"`
}

func (q *Queries) AssignTeamToPlayer(ctx context.Context, arg AssignTeamToPlayerParams) error {
	_, err := q.db.ExecContext(ctx, assignTeamToPlayer, arg.ID, arg.ID_2, arg.Balance)
	return err
}

const getAllPlayers = `-- name: GetAllPlayers :many
SELECT 
    players.id,
    players.name,
    players.country,
    players.role,
    players.rating,
    players.base_price,
    players.avatar_url,
    players.team_id,
    players.ipl_team,
    participant_teams.name AS ipl_team_name
FROM 
    players
LEFT JOIN 
    participant_teams ON players.ipl_team = participant_teams.id
ORDER BY 
    players.id
LIMIT $1 OFFSET $2
`

type GetAllPlayersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllPlayersRow struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Country     string         `json:"country"`
	Role        string         `json:"role"`
	Rating      int32          `json:"rating"`
	BasePrice   int32          `json:"basePrice"`
	AvatarUrl   sql.NullString `json:"avatarUrl"`
	TeamID      sql.NullInt32  `json:"teamId"`
	IplTeam     sql.NullInt64  `json:"iplTeam"`
	IplTeamName sql.NullString `json:"iplTeamName"`
}

func (q *Queries) GetAllPlayers(ctx context.Context, arg GetAllPlayersParams) ([]GetAllPlayersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlayers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlayersRow
	for rows.Next() {
		var i GetAllPlayersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Country,
			&i.Role,
			&i.Rating,
			&i.BasePrice,
			&i.AvatarUrl,
			&i.TeamID,
			&i.IplTeam,
			&i.IplTeamName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayer = `-- name: GetPlayer :one
SELECT 
    players.id,
    players.name,
    players.country,
    players.role,
    players.rating,
    players.base_price,
    players.avatar_url,
    players.team_id,
    players.ipl_team,
    participant_teams.name AS ipl_team_name
FROM 
    players
LEFT JOIN 
    participant_teams ON players.ipl_team = participant_teams.id
WHERE players.id = $1
LIMIT 1
`

type GetPlayerRow struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Country     string         `json:"country"`
	Role        string         `json:"role"`
	Rating      int32          `json:"rating"`
	BasePrice   int32          `json:"basePrice"`
	AvatarUrl   sql.NullString `json:"avatarUrl"`
	TeamID      sql.NullInt32  `json:"teamId"`
	IplTeam     sql.NullInt64  `json:"iplTeam"`
	IplTeamName sql.NullString `json:"iplTeamName"`
}

func (q *Queries) GetPlayer(ctx context.Context, id int32) (GetPlayerRow, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i GetPlayerRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Role,
		&i.Rating,
		&i.BasePrice,
		&i.AvatarUrl,
		&i.TeamID,
		&i.IplTeam,
		&i.IplTeamName,
	)
	return i, err
}
