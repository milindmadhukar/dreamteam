// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: players.sql

package db

import (
	"context"
)

const getAllPlayers = `-- name: GetAllPlayers :many
SELECT id, name, country, role, rating, base_price, avatar_url, team_id FROM players
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetAllPlayersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPlayers(ctx context.Context, arg GetAllPlayersParams) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlayers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Country,
			&i.Role,
			&i.Rating,
			&i.BasePrice,
			&i.AvatarUrl,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, name, country, role, rating, base_price, avatar_url, team_id FROM players 
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, id int32) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Role,
		&i.Rating,
		&i.BasePrice,
		&i.AvatarUrl,
		&i.TeamID,
	)
	return i, err
}
