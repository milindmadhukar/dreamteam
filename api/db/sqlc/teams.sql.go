// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: teams.sql

package db

import (
	"context"
)

const getAllParticipatingTeams = `-- name: GetAllParticipatingTeams :many
SELECT id, name, balance FROM participant_teams
ORDER BY id
`

func (q *Queries) GetAllParticipatingTeams(ctx context.Context) ([]ParticipantTeam, error) {
	rows, err := q.db.QueryContext(ctx, getAllParticipatingTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParticipantTeam
	for rows.Next() {
		var i ParticipantTeam
		if err := rows.Scan(&i.ID, &i.Name, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParticipatingTeam = `-- name: GetParticipatingTeam :one
SELECT id, name, balance FROM participant_teams
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetParticipatingTeam(ctx context.Context, id int32) (ParticipantTeam, error) {
	row := q.db.QueryRowContext(ctx, getParticipatingTeam, id)
	var i ParticipantTeam
	err := row.Scan(&i.ID, &i.Name, &i.Balance)
	return i, err
}
