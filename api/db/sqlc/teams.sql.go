// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: teams.sql

package db

import (
	"context"
	"database/sql"
)

const getAllParticipatingTeams = `-- name: GetAllParticipatingTeams :many
SELECT id, name, balance FROM participant_teams
ORDER BY id
`

func (q *Queries) GetAllParticipatingTeams(ctx context.Context) ([]ParticipantTeam, error) {
	rows, err := q.db.QueryContext(ctx, getAllParticipatingTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParticipantTeam
	for rows.Next() {
		var i ParticipantTeam
		if err := rows.Scan(&i.ID, &i.Name, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTeamPlayers = `-- name: GetAllTeamPlayers :many
SELECT 
    pt.id AS team_id,
    pt.name AS ipl_team_name,
    pt.balance AS team_balance,
    p.id, p.name, p.country, p.role, p.rating, p.base_price, p.avatar_url, p.team_id, p.ipl_team, p.is_unsold, p.sold_for_amount
FROM participant_teams pt
LEFT JOIN players p ON p.team_id = pt.id
ORDER BY pt.id, p.id
`

type GetAllTeamPlayersRow struct {
	TeamID        int32          `json:"teamId"`
	IplTeamName   string         `json:"iplTeamName"`
	TeamBalance   int32          `json:"teamBalance"`
	ID            sql.NullInt32  `json:"id"`
	Name          sql.NullString `json:"name"`
	Country       sql.NullString `json:"country"`
	Role          sql.NullString `json:"role"`
	Rating        sql.NullInt32  `json:"rating"`
	BasePrice     sql.NullInt32  `json:"basePrice"`
	AvatarUrl     sql.NullString `json:"avatarUrl"`
	TeamID_2      sql.NullInt32  `json:"teamId2"`
	IplTeam       sql.NullInt64  `json:"iplTeam"`
	IsUnsold      sql.NullBool   `json:"isUnsold"`
	SoldForAmount sql.NullInt32  `json:"soldForAmount"`
}

func (q *Queries) GetAllTeamPlayers(ctx context.Context) ([]GetAllTeamPlayersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTeamPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTeamPlayersRow
	for rows.Next() {
		var i GetAllTeamPlayersRow
		if err := rows.Scan(
			&i.TeamID,
			&i.IplTeamName,
			&i.TeamBalance,
			&i.ID,
			&i.Name,
			&i.Country,
			&i.Role,
			&i.Rating,
			&i.BasePrice,
			&i.AvatarUrl,
			&i.TeamID_2,
			&i.IplTeam,
			&i.IsUnsold,
			&i.SoldForAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParticipatingTeam = `-- name: GetParticipatingTeam :one
SELECT id, name, balance FROM participant_teams
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetParticipatingTeam(ctx context.Context, id int32) (ParticipantTeam, error) {
	row := q.db.QueryRowContext(ctx, getParticipatingTeam, id)
	var i ParticipantTeam
	err := row.Scan(&i.ID, &i.Name, &i.Balance)
	return i, err
}

const getTeamPlayers = `-- name: GetTeamPlayers :many
SELECT 
    pt.name AS ipl_team_name,
    pt.balance AS team_balance,
    p.id, p.name, p.country, p.role, p.rating, p.base_price, p.avatar_url, p.team_id, p.ipl_team, p.is_unsold, p.sold_for_amount
FROM participant_teams pt
INNER JOIN players p ON p.team_id = pt.id
WHERE pt.id = $1
ORDER BY p.id
`

type GetTeamPlayersRow struct {
	IplTeamName   string         `json:"iplTeamName"`
	TeamBalance   int32          `json:"teamBalance"`
	ID            int32          `json:"id"`
	Name          string         `json:"name"`
	Country       string         `json:"country"`
	Role          string         `json:"role"`
	Rating        int32          `json:"rating"`
	BasePrice     int32          `json:"basePrice"`
	AvatarUrl     sql.NullString `json:"avatarUrl"`
	TeamID        sql.NullInt32  `json:"teamId"`
	IplTeam       sql.NullInt64  `json:"iplTeam"`
	IsUnsold      bool           `json:"isUnsold"`
	SoldForAmount int32          `json:"soldForAmount"`
}

func (q *Queries) GetTeamPlayers(ctx context.Context, id int32) ([]GetTeamPlayersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeamPlayers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamPlayersRow
	for rows.Next() {
		var i GetTeamPlayersRow
		if err := rows.Scan(
			&i.IplTeamName,
			&i.TeamBalance,
			&i.ID,
			&i.Name,
			&i.Country,
			&i.Role,
			&i.Rating,
			&i.BasePrice,
			&i.AvatarUrl,
			&i.TeamID,
			&i.IplTeam,
			&i.IsUnsold,
			&i.SoldForAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTeamPlayers = `-- name: GetUserTeamPlayers :many
SELECT 
    (
      SELECT pt.name 
     FROM participant_teams pt 
     JOIN users u ON u.participant_team_id = pt.id 
     WHERE u.id = $1
    ) AS ipl_team_name,
    pt.balance AS team_balance,
    p.id, p.name, p.country, p.role, p.rating, p.base_price, p.avatar_url, p.team_id, p.ipl_team, p.is_unsold, p.sold_for_amount
FROM players p
JOIN participant_teams pt ON p.team_id = pt.id
JOIN users u ON u.participant_team_id = pt.id
WHERE u.id = $1
`

type GetUserTeamPlayersRow struct {
	IplTeamName   string         `json:"iplTeamName"`
	TeamBalance   int32          `json:"teamBalance"`
	ID            int32          `json:"id"`
	Name          string         `json:"name"`
	Country       string         `json:"country"`
	Role          string         `json:"role"`
	Rating        int32          `json:"rating"`
	BasePrice     int32          `json:"basePrice"`
	AvatarUrl     sql.NullString `json:"avatarUrl"`
	TeamID        sql.NullInt32  `json:"teamId"`
	IplTeam       sql.NullInt64  `json:"iplTeam"`
	IsUnsold      bool           `json:"isUnsold"`
	SoldForAmount int32          `json:"soldForAmount"`
}

func (q *Queries) GetUserTeamPlayers(ctx context.Context, id int64) ([]GetUserTeamPlayersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTeamPlayers, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTeamPlayersRow
	for rows.Next() {
		var i GetUserTeamPlayersRow
		if err := rows.Scan(
			&i.IplTeamName,
			&i.TeamBalance,
			&i.ID,
			&i.Name,
			&i.Country,
			&i.Role,
			&i.Rating,
			&i.BasePrice,
			&i.AvatarUrl,
			&i.TeamID,
			&i.IplTeam,
			&i.IsUnsold,
			&i.SoldForAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
